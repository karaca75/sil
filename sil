import { Field, tokens } from '@ds/react-components';
import { FC, useEffect, useRef, useState } from 'react';
import { ControlType } from '../../enums';
import type { ControlValue, FormSection } from '../DynamicForm/DynamicForm.types';
import { AutoGrowTextArea } from './AutogrowTextArea';

type TextareaControlProps = {
  section: FormSection;
  onValueChange: (value: ControlValue) => void;
  value: string | null;
};

export const TextareaControl: FC<TextareaControlProps> = ({ value, section, onValueChange }) => {
  const [inputValue, setInputValue] = useState(value ?? '');
  const lastSubmittedValueRef = useRef<string>(value ?? '');
  const isFirstRender = useRef(true);

  // Sync external value if it changes (e.g., programmatic reset)
  useEffect(() => {
    if (value !== null && value !== inputValue) {
      setInputValue(value);
    }
  }, [value]);

  // Debounce onValueChange
  useEffect(() => {
    const handler = setTimeout(() => {
      if (isFirstRender.current) {
        isFirstRender.current = false;
        return;
      }

      if (inputValue !== lastSubmittedValueRef.current) {
        onValueChange({
          id: section.id,
          contentId: section.contentId,
          value: inputValue,
          controlType: ControlType.TextArea,
        });
        lastSubmittedValueRef.current = inputValue;
      }
    }, 400);

    return () => clearTimeout(handler);
  }, [inputValue, section, onValueChange]);

  const handleChange = (_e: unknown, { value }: { value: string }) => {
    setInputValue(value);
  };

  if (section.parentContentId) {
    return (
      <Field label={section.title} relationship="htmlFor" hint={section.description ?? undefined}>
        <AutoGrowTextArea value={inputValue} onChange={handleChange} />
      </Field>
    );
  }

  return (
    <AutoGrowTextArea
      value={inputValue}
      onChange={handleChange}
      style={{ marginTop: tokens.spacingVerticalS }}
    />
  );
};
